{"ast":null,"code":"import _slicedToArray from \"E:\\\\Downloads\\\\reactTask\\\\ReactJS-Code-Challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:\\\\Downloads\\\\reactTask\\\\ReactJS-Code-Challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { useEffect, useReducer } from 'react';\nvar initialState = {\n  list: [{\n    id: 1,\n    completed: false,\n    text: 'Read README'\n  }, {\n    id: 2,\n    completed: false,\n    text: 'Add one todo'\n  }, {\n    id: 3,\n    completed: false,\n    text: 'Add filters'\n  }, {\n    id: 4,\n    completed: true,\n    text: 'Add multiple lists',\n    url: 'listitem'\n  }, {\n    id: 5,\n    completed: false,\n    text: 'Optional: add tests'\n  }]\n};\n\nfunction syncStorage(state) {\n  if (window && window.localStorage) {\n    window.localStorage.setItem('appState', JSON.stringify(state));\n  }\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'read_storage':\n      if (window && window.localStorage) {\n        var _state = window.localStorage.getItem('appState');\n\n        if (_state && _state !== 'undefined') {\n          return JSON.parse(_state);\n        }\n      }\n\n      return initialState;\n\n    case 'toggle_complete':\n      var id = action.id;\n      return {\n        list: state.list.map(function (item) {\n          if (item.id === id) {\n            return _objectSpread({}, item, {\n              completed: !item.completed\n            });\n          }\n\n          return item;\n        })\n      };\n\n    case 'create_todo':\n      var text = action.text;\n      var item = {\n        completed: false,\n        text: text,\n        id: state.list.length + 1\n      };\n      var list = state.list.concat(item);\n      return {\n        list: list\n      };\n\n    default:\n      throw new Error('Unknown type: ' + action.type);\n  }\n}\n\nfunction useTodos() {\n  var _useReducer = useReducer(reducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var list = state.list;\n  useEffect(function () {\n    dispatch({\n      type: 'read_storage'\n    });\n  }, [dispatch]);\n  useEffect(function () {\n    syncStorage({\n      list: list\n    });\n  }, [list]);\n\n  var createTodo = function createTodo(text) {\n    return dispatch({\n      type: 'create_todo',\n      text: text\n    });\n  };\n\n  var toggleComplete = function toggleComplete(id) {\n    return dispatch({\n      type: 'toggle_complete',\n      id: id\n    });\n  };\n\n  return {\n    list: list,\n    createTodo: createTodo,\n    toggleComplete: toggleComplete\n  };\n}\n\nexport default useTodos;","map":{"version":3,"sources":["E:/Downloads/reactTask/ReactJS-Code-Challenge/src/useTodos.js"],"names":["useEffect","useReducer","initialState","list","id","completed","text","url","syncStorage","state","window","localStorage","setItem","JSON","stringify","reducer","action","type","getItem","parse","map","item","length","concat","Error","useTodos","dispatch","createTodo","toggleComplete"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from 'react'\r\n\r\nconst initialState = {\r\n  list: [\r\n    {\r\n      id: 1,\r\n      completed: false,\r\n      text: 'Read README'\r\n    },\r\n    {\r\n      id: 2,\r\n      completed: false,\r\n      text: 'Add one todo'\r\n    },\r\n    {\r\n      id: 3,\r\n      completed: false,\r\n      text: 'Add filters'\r\n    },\r\n    {\r\n      id: 4,\r\n      completed: true,\r\n      text: 'Add multiple lists',\r\n      url:'listitem'\r\n    },\r\n    {\r\n      id: 5,\r\n      completed: false,\r\n      text: 'Optional: add tests'\r\n    } \r\n  ]\r\n}\r\n\r\nfunction syncStorage (state) {\r\n  if (window && window.localStorage) {\r\n    window.localStorage.setItem('appState', JSON.stringify(state))\r\n  }\r\n}\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'read_storage':\r\n      if (window && window.localStorage) {\r\n        const state = window.localStorage.getItem('appState')\r\n        if (state && state !== 'undefined') {\r\n          return JSON.parse(state)\r\n        }\r\n      }\r\n\r\n      return initialState\r\n\r\n    case 'toggle_complete':\r\n        const { id } = action\r\n\r\n        return {\r\n          list: state.list.map(item => {\r\n            if (item.id === id) {\r\n              return {\r\n                ...item,\r\n                completed: !item.completed\r\n              }\r\n            }\r\n\r\n            return item\r\n          })\r\n        }\r\n    case 'create_todo':\r\n      const { text } = action\r\n      const item = {\r\n        completed: false,\r\n        text,\r\n        id: state.list.length + 1\r\n      }\r\n\r\n      const list = state.list.concat(item)\r\n      return { list }\r\n\r\n    default:\r\n      throw new Error('Unknown type: ' + action.type);\r\n  }\r\n}\r\n\r\nfunction useTodos() {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const { list } = state\r\n\r\n  useEffect(() => {\r\n    dispatch({type: 'read_storage' })\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    syncStorage({ list })\r\n  }, [list])\r\n\r\n  const createTodo = (text) => dispatch({ type: 'create_todo', text })\r\n  const toggleComplete = (id) => dispatch({ type: 'toggle_complete', id })\r\n\r\n  return { list, createTodo, toggleComplete }\r\n}\r\n\r\nexport default useTodos"]},"metadata":{},"sourceType":"module"}